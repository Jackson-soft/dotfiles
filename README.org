#+TITLE:  ~Linux~ && Mac OS 平台上用的各种配置文件
* 简要
目前在用的一些工具的配置文件
** 安装
#+begin_src shell
git clone --depth 1 https://github.com/Jackson-soft/dotfiles.git && cd dotfiles && sh ./link.sh
#+end_src
* ~Emacs~
* ~Zsh~
** 实用工具
*** ~fzf~
[[https://github.com/junegunn/fzf][fzf]] 是一个模糊搜索工具。有一个竞品是 [[https://github.com/lotabout/skim][skim]] ，曾经也用过一段时间，奈何周边生态不如 ~fzf~ ，后面切回到 ~fzf~ 。

基本键位：
- ~CTRL-T~ :: Paste the selected files and directories onto the command-line
- ~CTRL-R~ :: Paste the selected command from history onto the command-line
- ~ALT-C~ :: cd into the selected directory

~zinit~ 的安装配置如下：
#+begin_src shell
zinit ice as"null" wait lucid from"gh-r" sbin"fzf" \
    dl'https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.zsh -> key-bindings.zsh' \
    src'key-bindings.zsh'
zinit light junegunn/fzf
#+end_src

这里需要说明一下， ~fzf~ 的键位绑定需要 ~source key-bindings.zsh~ ，但我们 ~from"gh-r"~ 即 ~github-release~ 下载的二进制包里是
没有 ~key-bindings.zsh~ 这个文件，所以需要单独来下载这个文件，即添加
#+begin_src shell
dl'https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.zsh -> key-bindings.zsh' \
  src'key-bindings.zsh'
#+end_src

如果 ~Mac~ 有用 ~iterm2~ 的同学要注意， ~ALT-C~ 有可能会失效，解决方法是：

Go to Preferences->Profiles tab. Select your profile on the left, and then open the Keyboard tab.
At the bottom is a set of buttons that lets you select the behavior of the Option key.
For most users, Esc+ will be the best choice.

以上是方法是取自 [[https://github.com/junegunn/fzf/issues/164][Alt-C not working on OSX ]] 。
*** ~fd~
[[https://github.com/sharkdp/fd][fd]] 是 ~find~ 命令的替代品。
*** ~bat~
[[https://github.com/sharkdp/bat][bat]] 是 ~cat~ 命令的替代品。
*** ~delta~
[[https://github.com/dandavison/delta][delta]] 是文件对比工具，主要是用来替换 ~git diff~ 用的。可以在 =~/.gitconfig= 文件中做以下配置：
#+begin_src conf
[pager]
    diff = delta
    log = delta
    reflog = delta
    show = delta

[interactive]
    diffFilter = delta --color-only

[delta]
    features = side-by-side line-numbers decorations
    whitespace-error-style = 22 reverse

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none
#+end_src
*** ~ripgrep~
[[https://github.com/BurntSushi/ripgrep][ripgrep]] 是一个文本搜索工具。
*** ~procs~
[[https://github.com/dalance/procs][procs]] 是 ~ps~ 命令的替代品。
*** ~exa~
[[https://github.com/ogham/exa][exa]] 是 ~ls~ 命令的替代品。它同样有一个竞品 [[https://github.com/Peltoche/lsd][lsd]] ，两者功能性上差不多，看个人口味来取舍。
*** ~vivid~
[[https://github.com/sharkdp/vivid][vivid]] 是环境变量 =LS_COLORS= 的数据源。可以做以下配置:
#+begin_src shell
export LS_COLORS="$(vivid generate molokai)"
#+end_src

主要是不同格式的文件显示不同的颜色，相比单一的白色会更好区分。
** 插件管理
[[https://github.com/zdharma/zinit][zinit]] 是目前用着比较不错的一个 ~zsh~ 插件管理器。个人比较相中的有两点：
- 性能不错；
- 用什么插件就配置什么插件，不必像 ~Oh My Zsh~ 或 ~Prezto~ 一样，插件不管你用不用都下载下来。
*** 插件
**** ~fzf-tab~
[[https://github.com/Aloxaf/fzf-tab][fzf-tab]] 依赖于 ~fzf~ 的 ~Tab~ 补全插件，强烈推荐。

基本配置如下：
#+begin_src shell
# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# preview directory's content with exa when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
# switch group using `,` and `.`
zstyle ':fzf-tab:*' switch-group ',' '.'
#+end_src

基本的键位：
- ~Ctrl+Space~ :: select multiple results, can be configured by ~fzf-bindings~ tag
- ~F1/F2~ :: switch between groups, can be configured by ~switch-group~ tag
- ~/~ :: trigger continuous completion (useful when completing a deep path), can be configured by ~continuous-trigger~ tag
**** ~zsh-z~
[[https://github.com/agkozak/zsh-z][zsh-z]] 快速跳转使用过的目录，有点类似于搜索历史记录，数据存在 =~/.z= 目录下。
**** ~forgit~
[[https://github.com/wfxr/forgit][forgit]] 依赖于 ~fzf~ 的 ~git~ 命令封装工具。

一些默认的简写：
#+begin_src conf
forgit_log=glo
forgit_diff=gd
forgit_add=ga
forgit_reset_head=grh
forgit_ignore=gi
forgit_checkout_file=gcf
forgit_checkout_branch=gcb
forgit_checkout_commit=gco
forgit_clean=gclean
forgit_stash_show=gss
forgit_cherry_pick=gcp
forgit_rebase=grb
forgit_fixup=gfu
#+end_src
**** ~git-extras~
[[https://github.com/tj/git-extras][git-extras]] ~git~ 的扩展工具包。

* ~Vim~
~Vim~ 主要是满足日常配置脚本之用。
